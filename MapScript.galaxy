//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Blistering Sands
// Author: Blizzard Entertainment
// 
//==================================================================================================
include "TriggerLibs/NativeLib"

fixed overhead = 0;
fixed stringOverhead = 0;

const int loopRounds = 15000;
const int stringLoopRounds = 1000;

void puts(string message)
{
	//TriggerDebugOutput(1, StringToText(message), true);
}

string FixedToString(fixed f, int precision) {
	string s = "";
	int g;
	
	if (precision < 0) {
		precision = 0;
	}

	if (f < 0) {
		s = "-";
		f = -f;
	}

	g = FixedToInt(f);
	s = s + IntToString(g);
	f = f - g;

	if (precision != 0 && f != 0) {
		s = s + ".";

		do {
			f = f * 10;
			g = FixedToInt(f);
			s = s + IntToString(g);
			f = f - g;
			precision = precision - 1;
		} while (f != 0 && precision != 0);
	
	}
	
	return s;
} 

void sleep()
{
	Wait(0.0, 0);
}

fixed report(string title)
{
	fixed time = GetCounter() - overhead;
	sleep();
	puts(title + ": " + FixedToString(time, 4) + " ms");
	Log("        <test title='" + title + "' value='" + FixedToString(time, 10) + "'/>\n");	
	return time;
}

fixed reportString(string title)
{
	fixed time = GetCounter() - stringOverhead;
	sleep();
	puts(title + ": " + FixedToString(time, 4) + " ms");
	Log("        <test title='" + title + "' value='" + FixedToString(time, 10) + "'/>\n");	
	return time;
}

void start(int *counter)
{
	*counter = 0;
	StartCounter();
}

int benchmark_vars_t;

int benchmark_vars_t2;

void benchmark_vars()
{
	int i;
	int t;

	start(&i);
	while(i < loopRounds) {
		t = i;
		t = i;
		t = i;
		i += 1;
	}
	report("Variable loading variable");
	
	start(&i);
	while(i < loopRounds) {
		t = 6456;
		t = 73;
		t = 838;
		i += 1;
	}
	report("Variable loading value");
	
	start(&i);
	while(i < loopRounds) {
		t = benchmark_vars_t;
		t = benchmark_vars_t;
		t = benchmark_vars_t;
		i += 1;
	}
	report("Variable loading global");
	
	start(&i);
	while(i < loopRounds) {
		benchmark_vars_t = benchmark_vars_t2;
		benchmark_vars_t = benchmark_vars_t2;
		benchmark_vars_t = benchmark_vars_t2;
		i += 1;
	}
	report("Global loading global");
	
	start(&i);
	while(i < loopRounds) {
		benchmark_vars_t = 6456;
		benchmark_vars_t = 73;
		benchmark_vars_t = 838;
		i += 1;
	}
	report("Global loading value");
	
	start(&i);
	while(i < loopRounds) {
		benchmark_vars_t = i;
		benchmark_vars_t = i;
		benchmark_vars_t = i;
		i += 1;
	}
	report("Global loading variable");
}

void benchmark_pointers()
{
	int i;
	int *p;
	int t;
	p = &t;
	
	start(&i);
	while(i < loopRounds) {
		t = *p;
		t = *p;
		t = *p;
		i += 1;
	}
	report("Pointer dereferencing");
	
	start(&i);
	while(i < loopRounds) {
		*p = t;
		*p = i;
		*p = t;
		i += 1;
	}
	report("Pointer dereferencing and assigning variable");
	
	start(&i);
	while(i < loopRounds) {
		*p = 36636;
		*p = 7337;
		*p = 4232;
		i += 1;
	}
	report("Pointer dereferencing and assigning value");
	
	start(&i);
	while(i < loopRounds) {
		p = &i;
		p = &i;
		p = &i;
		i += 1;
	}
	report("Address of object");
}

int[3] benchmark_arrays_a;

void benchmark_arrays()
{
	int i;
	int[3] a;
	int t;
	
	start(&i);
	while(i < loopRounds) {
		t = a[0];
		t = a[0];
		t = a[0];
		i += 1;
	}
	report("Array element reading");
	
	start(&i);
	while(i < loopRounds) {
		a[0] = t;
		a[1] = t;
		a[2] = t;
		i += 1;
	}
	report("Array element writing variable");
	
	start(&i);
	while(i < loopRounds) {
		a[0] = 7373;
		a[1] = 8483;
		a[2] = 34535;
		i += 1;
	}
	report("Array element writing value");
	
	start(&i);
	while(i < loopRounds) {
		t = benchmark_arrays_a[0];
		t = benchmark_arrays_a[0];
		t = benchmark_arrays_a[0];
		i += 1;
	}
	report("Global array element reading");
	
	start(&i);
	while(i < loopRounds) {
		benchmark_arrays_a[0] = t;
		benchmark_arrays_a[1] = t;
		benchmark_arrays_a[2] = t;
		i += 1;
	}
	report("Global array element writing variable");
	
	start(&i);
	while(i < loopRounds) {
		benchmark_arrays_a[0] = 7373;
		benchmark_arrays_a[1] = 8483;
		benchmark_arrays_a[2] = 34535;
		i += 1;
	}
	report("Global array element writing value");
}

struct benchmark_struct { int y; int z; int i; };

void benchmark_structs()
{
	benchmark_struct s;
	benchmark_struct s2;
	benchmark_struct *p;
	int i;
	int t;
	p = &s;
	
	start(&i);
	while(i < loopRounds) {
		t = s.y;
		t = s.i;
		t = s.z;
		i += 1;
	}
	report("Struct field reading");

	start(&i);
	while(i < loopRounds) {
		s.y = t;
		s.i = t;
		s.z = t;
		i += 1;
	}
	report("Struct field writing variable");

	start(&i);
	while(i < loopRounds) {
		s.y = 83333333;
		s.i = 3636;
		s.z = 737;
		i += 1;
	}
	report("Struct field writing value");

	start(&i);
	while(i < loopRounds) {
		t = p->z;
		t = p->i;
		t = p->y;
		i += 1;
	}
	report("Struct field reading by pointer (using ->)");

	start(&i);
	while(i < loopRounds) {
		p->z = t;
		p->i = t;
		p->y = t;
		i += 1;
	}
	report("Struct field writing variable by pointer (using ->)");

	start(&i);
	while(i < loopRounds) {
		p->z = 73833;
		p->i = 363683;
		p->y = 6366;
		i += 1;
	}
	report("Struct field writing value by pointer (using ->)");

	start(&i);
	while(i < loopRounds) {
		t = (*p).y;
		t = (*p).i;
		t = (*p).z;
		i += 1;
	}
	report("Struct field reading by pointer");

	start(&i);
	while(i < loopRounds) {
		(*p).z = t;
		(*p).i = t;
		(*p).y = t;
		i += 1;
	}
	report("Struct field writing variable by pointer");
	
	start(&i);
	while(i < loopRounds) {
		(*p).z = 76386;
		(*p).i = 3425;
		(*p).y = 4747;
		i += 1;
	}
	report("Struct field writing value by pointer");
}

void benchmark_functions_sub1 () {
}

void benchmark_functions_sub2 (int p1, int p2, int p3, int p4, int p5, int p6, int p7) {
}

void benchmark_functions()
{
	int i = 0;
	
	start(&i);
	while(i < loopRounds) {
		benchmark_functions_sub1();
		benchmark_functions_sub1();
		benchmark_functions_sub1();
		i += 1;
	}
	report("Function call (no arguments)");

	start(&i);
	while(i < loopRounds) {
		benchmark_functions_sub2(1, 2, 3, 4, 5, 6, 7);
		benchmark_functions_sub2(1, 2, 3, 4, 5, 6, 7);
		benchmark_functions_sub2(1, 2, 3, 4, 5, 6, 7);
		i += 1;
	}
	report("Function call (7 arguments)");
	
	start(&i);
	while(i < loopRounds) {
		IntToFixed(1);
		IntToFixed(1);
		IntToFixed(1);
		i += 1;
	}
	report("Native call (1 argument)");
}

void benchmark_integers()
{
	int i;
	int t;

	start(&i);
	while(i < loopRounds) {
		t = 256 + 256;
		t = 256 + 256;
		t = 256 + 256;
		i += 1;
	}
	report("Integer addition");

	start(&i);
	while(i < loopRounds) {
		t = 256 * 256;
		t = 256 * 256;
		t = 256 * 256;
		i += 1;
	}
	report("Integer multiplication");
	
	start(&i);
	while(i < loopRounds) {
		t = 1024 / 256;
		t = 1024 / 256;
		t = 1024 / 256;
		i += 1;
	}
	report("Integer division");
	
	start(&i);
	while(i < loopRounds) {
		t = 1024 & 256;
		t = 1024 & 256;
		t = 1024 & 256;
		i += 1;
	}
	report("Integer modulus");
}

void benchmark_fixed()
{
	int i;
	fixed t;

	start(&i);
	while(i < loopRounds) {
		t = 256.0 + 256.0;
		t = 256.0 + 256.0;
		t = 256.0 + 256.0;
		i += 1;
	}
	report("Real addition");

	start(&i);
	while(i < loopRounds) {
		t = 256.0 * 256.0;
		t = 256.0 * 256.0;
		t = 256.0 * 256.0;
		i += 1;
	}
	report("Real multiplication");
	
	start(&i);
	while(i < loopRounds) {
		t = 1024.0 / 256.0;
		t = 1024.0 / 256.0;
		t = 1024.0 / 256.0;
		i += 1;
	}
	report("Real division");
	
	start(&i);
	while(i < loopRounds) {
		t = t % 256;
		t = t % 256;
		t = t % 256;
		i += 1;
	}
	report("Real modulus");
}

void benchmark_strings()
{
	bool test;
	int i;
	string str;
	string long;

	start(&i);
	while(i < stringLoopRounds) {
		str += "h";
		str += "h";
		str += "h";
		i += 1;
	}
	reportString("String concatenation (1 char)");
	
	str = "";
	start(&i);
	while(i < stringLoopRounds) {
		str += "h";
		str += "h";
		str += "h";
		i += 1;
	}
	reportString("String concatenation (1 char repeat)");

	str = "";
	start(&i);
	while(i < stringLoopRounds) {
		str += "hgw4wqywh5";
		str += "hgw4wqywh5";
		str += "hgw4wqywh5";
		i += 1;
	}
	reportString("String concatenation (10 chars)");

	str = "";
	start(&i);
	while(i < stringLoopRounds) {
		str += "hgw4wqywh5";
		str += "hgw4wqywh5";
		str += "hgw4wqywh5";
		i += 1;
	}
	reportString("String concatenation (10 chars repeat)");

	start(&i);
	while(i < stringLoopRounds) {
		test = str == str;
		test = str == str;
		test = str == str;
		i += 1;
	}
	reportString("String compare (long string)");
	
	long = str;
	str = "hello";
	start(&i);
	while(i < stringLoopRounds) {
		test = str == str;
		test = str == str;
		test = str == str;
		i += 1;
	}
	reportString("String compare (4 chars)");

	start(&i);
	while(i < stringLoopRounds) {
		StringEqual(str, "hello", false);
		StringEqual(str, "hello", false);
		StringEqual(str, "hello", false);
		i += 1;
	}
	reportString("StringEqual(str, str, false) (4 chars)");
	
	start(&i);
	while(i < stringLoopRounds) {
		StringEqual(str, "hello", true);
		i += 1;
	}
	reportString("StringEqual(str, str, true) (4 chars)");
	
	start(&i);
	while(i < stringLoopRounds) {
		StringEqual(long, long, false);
		StringEqual(long, long, false);
		StringEqual(long, long, false);
		i += 1;
	}
	reportString("StringEqual(str, str, false) (long string)");
	
	start(&i);
	while(i < stringLoopRounds) {
		StringEqual(long, long, true);
		i += 1;
	}
	reportString("StringEqual(str, str, true) (long string)");
}

void run_benchmark()
{
	int i;
	
	sleep();

	start(&i);
	while(i < loopRounds) {
		i += 1;
	}
	overhead = report("Overhead");
	
	start(&i);
	while(i < stringLoopRounds) {
		i += 1;
	}
	stringOverhead = reportString("String overhead");
	
	sleep();

	benchmark_vars();
	benchmark_pointers();
	benchmark_arrays();
	benchmark_structs();
	benchmark_functions();
	benchmark_integers();
	benchmark_fixed();
	benchmark_strings(); 
}

bool runInit(bool testConds, bool runActions)
{
	int i;
	
    if (!runActions) {
        return true;
    }
	
	Log("<benchmark lang='ruby'>\n");

	while(i < 100) {
		Log("    <result>\n");
		 run_benchmark();
		 TriggerDebugOutput(1, StringToText(IntToString(i + 1) + "/100"), true);
		Log("    </result>\n");
		i += 1;
	}
	
	Log("</benchmark>\n");
	
    return true;
}

trigger trigger_init;

void InitMap()
{
    libNtve_InitLib();
    trigger_init = TriggerCreate("runInit");
    TriggerAddEventMapInit(trigger_init);
}
